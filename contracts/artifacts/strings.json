{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"goerli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"functionDebugData": {},
			"generatedSources": [],
			"linkReferences": {},
			"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a9b35a1fc7e89f9e33b5c1584774cc6f838b7aef87ce25696df5401892cf749a64736f6c63430008190033",
			"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0xB3 GAS 0x1F 0xC7 0xE8 SWAP16 SWAP15 CALLER 0xB5 0xC1 PC SELFBALANCE PUSH21 0xCC6F838B7AEF87CE25696DF5401892CF749A64736F PUSH13 0x63430008190033000000000000 ",
			"sourceMap": "2074:24116:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
		},
		"deployedBytecode": {
			"functionDebugData": {},
			"generatedSources": [],
			"immutableReferences": {},
			"linkReferences": {},
			"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a9b35a1fc7e89f9e33b5c1584774cc6f838b7aef87ce25696df5401892cf749a64736f6c63430008190033",
			"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0xB3 GAS 0x1F 0xC7 0xE8 SWAP16 SWAP15 CALLER 0xB5 0xC1 PC SELFBALANCE PUSH21 0xCC6F838B7AEF87CE25696DF5401892CF749A64736F PUSH13 0x63430008190033000000000000 ",
			"sourceMap": "2074:24116:0:-:0;;;;;;;;"
		},
		"gasEstimates": {
			"creation": {
				"codeDepositCost": "17000",
				"executionCost": "92",
				"totalCost": "17092"
			},
			"internal": {
				"beyond(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"compare(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"concat(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"contains(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"copy(struct strings.slice memory)": "infinite",
				"count(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"empty(struct strings.slice memory)": "infinite",
				"endsWith(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"equals(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"find(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"findPtr(uint256,uint256,uint256,uint256)": "infinite",
				"join(struct strings.slice memory,struct strings.slice memory[] memory)": "infinite",
				"keccak(struct strings.slice memory)": "infinite",
				"len(bytes32)": "infinite",
				"len(struct strings.slice memory)": "infinite",
				"memcpy(uint256,uint256,uint256)": "infinite",
				"nextRune(struct strings.slice memory)": "infinite",
				"nextRune(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"ord(struct strings.slice memory)": "infinite",
				"rfind(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"rfindPtr(uint256,uint256,uint256,uint256)": "infinite",
				"rsplit(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"rsplit(struct strings.slice memory,struct strings.slice memory,struct strings.slice memory)": "infinite",
				"split(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"split(struct strings.slice memory,struct strings.slice memory,struct strings.slice memory)": "infinite",
				"startsWith(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"toSlice(string memory)": "infinite",
				"toSliceB32(bytes32)": "infinite",
				"toString(struct strings.slice memory)": "infinite",
				"until(struct strings.slice memory,struct strings.slice memory)": "infinite"
			}
		},
		"methodIdentifiers": {}
	},
	"abi": [
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "mask",
					"type": "bytes32"
				}
			],
			"name": "log_bytemask",
			"type": "event"
		}
	]
}